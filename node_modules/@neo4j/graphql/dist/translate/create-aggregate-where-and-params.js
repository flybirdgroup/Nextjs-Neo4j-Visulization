"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aggregateWhere = exports.aggregatePreComputedWhereFields = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const utils_1 = require("./where/utils");
const create_comparison_operation_1 = require("./where/property-operations/create-comparison-operation");
const constants_1 = require("../constants");
function aggregatePreComputedWhereFields(value, relationField, context, matchNode) {
    const refNode = context.nodes.find((x) => x.name === relationField.typeMeta.name);
    const direction = relationField.direction;
    const aggregationTarget = new cypher_builder_1.default.Node({ labels: refNode.getLabels(context) });
    const cypherRelation = new cypher_builder_1.default.Relationship({
        source: matchNode,
        target: aggregationTarget,
        type: relationField.type,
    });
    if (direction === "IN") {
        cypherRelation.reverse();
    }
    const matchQuery = new cypher_builder_1.default.Match(cypherRelation);
    const { returnProjections, predicates } = aggregateWhere(value, refNode, aggregationTarget, cypherRelation);
    matchQuery.return(...returnProjections);
    const subquery = new cypher_builder_1.default.Call(matchQuery).innerWith(matchNode);
    return {
        predicate: cypher_builder_1.default.and(...predicates),
        preComputedSubquery: subquery,
    };
}
exports.aggregatePreComputedWhereFields = aggregatePreComputedWhereFields;
function aggregateWhere(aggregateWhereInput, refNode, aggregationTarget, cypherRelation) {
    const returnProjections = [];
    const predicates = [];
    Object.entries(aggregateWhereInput).forEach(([key, value]) => {
        if (constants_1.AGGREGATION_AGGREGATE_COUNT_OPERATORS.includes(key)) {
            const { returnProjection: innerReturnProjection, predicate: innerPredicate } = createCountPredicateAndProjection(aggregationTarget, key, value);
            returnProjections.push(innerReturnProjection);
            predicates.push(innerPredicate);
        }
        else if (constants_1.NODE_OR_EDGE_KEYS.includes(key)) {
            const target = key === "edge" ? cypherRelation : aggregationTarget;
            const { returnProjections: innerReturnProjections, predicates: innerPredicates } = aggregateEntityWhere(value, refNode, target);
            returnProjections.push(...innerReturnProjections);
            predicates.push(...innerPredicates);
        }
        else if (constants_1.LOGICAL_OPERATORS.includes(key)) {
            const logicalOperator = key === "AND" ? cypher_builder_1.default.and : cypher_builder_1.default.or;
            const logicalPredicates = [];
            value.forEach((whereInput) => {
                const { returnProjections: innerReturnProjections, predicates: innerPredicates } = aggregateWhere(whereInput, refNode, aggregationTarget, cypherRelation);
                returnProjections.push(...innerReturnProjections);
                logicalPredicates.push(...innerPredicates);
            });
            predicates.push(logicalOperator(...logicalPredicates));
        }
    });
    return {
        returnProjections,
        predicates,
    };
}
exports.aggregateWhere = aggregateWhere;
function createCountPredicateAndProjection(aggregationTarget, filterKey, filterValue) {
    const paramName = new cypher_builder_1.default.Param(filterValue);
    const count = cypher_builder_1.default.count(aggregationTarget);
    const operator = utils_1.whereRegEx.exec(filterKey)?.groups?.operator || "EQ";
    const operation = (0, create_comparison_operation_1.createBaseOperation)({
        operator,
        property: count,
        param: paramName,
    });
    const operationVar = new cypher_builder_1.default.Variable();
    return {
        returnProjection: [operation, operationVar],
        predicate: cypher_builder_1.default.eq(operationVar, new cypher_builder_1.default.Literal(true)),
    };
}
function aggregateEntityWhere(aggregateEntityWhereInput, refNode, target) {
    const returnProjections = [];
    const predicates = [];
    Object.entries(aggregateEntityWhereInput).forEach(([key, value]) => {
        if (constants_1.LOGICAL_OPERATORS.includes(key)) {
            const logicalOperator = key === "AND" ? cypher_builder_1.default.and : cypher_builder_1.default.or;
            const logicalPredicates = [];
            value.forEach((whereInput) => {
                const { returnProjections: innerReturnProjections, predicates: innerPredicates } = aggregateEntityWhere(whereInput, refNode, target);
                returnProjections.push(...innerReturnProjections);
                logicalPredicates.push(...innerPredicates);
            });
            predicates.push(logicalOperator(...logicalPredicates));
        }
        else {
            const operation = createEntityOperation(refNode, target, key, value);
            const operationVar = new cypher_builder_1.default.Variable();
            returnProjections.push([operation, operationVar]);
            predicates.push(cypher_builder_1.default.eq(operationVar, new cypher_builder_1.default.Literal(true)));
        }
    });
    return {
        returnProjections,
        predicates,
    };
}
function createEntityOperation(refNode, target, aggregationInputField, aggregationInputValue) {
    const paramName = new cypher_builder_1.default.Param(aggregationInputValue);
    const regexResult = utils_1.aggregationFieldRegEx.exec(aggregationInputField)?.groups;
    const { logicalOperator } = regexResult;
    const { fieldName, aggregationOperator } = regexResult;
    const fieldType = refNode.primitiveFields.find((name) => name.fieldName === fieldName)?.typeMeta.name;
    if (fieldType === "String" && aggregationOperator) {
        return (0, create_comparison_operation_1.createBaseOperation)({
            operator: logicalOperator || "EQ",
            property: getAggregateOperation(cypher_builder_1.default.size(target.property(fieldName)), aggregationOperator),
            param: paramName,
        });
    }
    else if (aggregationOperator) {
        return (0, create_comparison_operation_1.createBaseOperation)({
            operator: logicalOperator || "EQ",
            property: getAggregateOperation(target.property(fieldName), aggregationOperator),
            param: paramName,
        });
    }
    else {
        const innerVar = new cypher_builder_1.default.Variable();
        const innerOperation = (0, create_comparison_operation_1.createBaseOperation)({
            operator: logicalOperator || "EQ",
            property: innerVar,
            param: paramName,
        });
        const collectedProperty = fieldType === "String" && logicalOperator !== "EQUAL"
            ? cypher_builder_1.default.collect(cypher_builder_1.default.size(target.property(fieldName)))
            : cypher_builder_1.default.collect(target.property(fieldName));
        return cypher_builder_1.default.any(innerVar, collectedProperty, innerOperation);
    }
}
function getAggregateOperation(property, aggregationOperator) {
    switch (aggregationOperator) {
        case "AVERAGE":
            return cypher_builder_1.default.avg(property);
        case "MIN":
        case "SHORTEST":
            return cypher_builder_1.default.min(property);
        case "MAX":
        case "LONGEST":
            return cypher_builder_1.default.max(property);
        case "SUM":
            return cypher_builder_1.default.sum(property);
        default:
            throw new Error(`Invalid operator ${aggregationOperator}`);
    }
}
//# sourceMappingURL=create-aggregate-where-and-params.js.map