import React, { useState } from 'react';
import Graph from 'react-graph-vis';

const graph = {
  nodes: [
    { id: 1, label: 'Node 1' },
    { id: 2, label: 'Node 2' },
    { id: 3, label: 'Node 3' },
    { id: 4, label: 'Node 4' },
    { id: 5, label: 'Node 5' },
  ],
  edges: [
    { from: 1, to: 2 },
    { from: 1, to: 3 },
    { from: 2, to: 4 },
    { from: 2, to: 5 },
  ],
};

const options = {
  layout: {
    hierarchical: {
      direction: 'UD',
      sortMethod: 'directed',
    },
  },
  edges: {
    arrows: 'to',
  },
  interaction: {
    hover: true,
  },
};

const events = {
  select: function(event) {
    const { nodes, edges } = event;
    console.log('Selected nodes:', nodes);
    console.log('Selected edges:', edges);
  },
};

function App() {
  const [state, setState] = useState({
    nodes: graph.nodes,
    edges: graph.edges,
  });

  const handleClick = (event) => {
    const { nodes } = event;
    const node = state.nodes.find((n) => n.id === nodes[0]);

    if (node.clicks === undefined) {
      node.clicks = 1;
      setState((prevState) => ({
        ...prevState,
        nodes: [...prevState.nodes],
      }));
    } else if (node.clicks === 1) {
      node.clicks = 2;
      setTimeout(() => {
        node.clicks = undefined;
        setState((prevState) => ({
          ...prevState,
          nodes: [...prevState.nodes],
        }));
      }, 300);
    } else {
      node.clicks = undefined;
      setState((prevState) => ({
        ...prevState,
        nodes: prevState.nodes.map((n) =>
          n.id === node.id
            ? {
                ...n,
                hidden: !n.hidden,
              }
            : n
        ),
      }));
    }
  };

  return (
    <Graph
      graph={state}
      options={options}
      events={events}
      style={{ width: '100%', height: '500px' }}
      onSelectNode={handleClick}
    />
  );
}

export default App;

