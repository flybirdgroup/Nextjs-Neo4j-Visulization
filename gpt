import React, { useState, useEffect } from 'react';
import Graph from 'react-graph-vis';

const graph = {
  nodes: [
    { id: 1, label: 'Node 1' },
    { id: 2, label: 'Node 2' },
    { id: 3, label: 'Node 3' },
    { id: 4, label: 'Node 4' },
    { id: 5, label: 'Node 5' },
  ],
  edges: [
    { from: 1, to: 2 },
    { from: 1, to: 3 },
    { from: 2, to: 4 },
    { from: 2, to: 5 },
  ],
};

const options = {
  layout: {
    hierarchical: {
      direction: 'UD',
      sortMethod: 'directed',
    },
  },
  edges: {
    arrows: 'to',
  },
  interaction: {
    hover: true,
  },
};

const events = {
  select: function(event) {
    const { nodes, edges } = event;
    console.log('Selected nodes:', nodes);
    console.log('Selected edges:', edges);
  },
};

function App() {
  const [network, setNetwork] = useState(null);
  const [divPosition, setDivPosition] = useState({});

  useEffect(() => {
    if (network) {
      const nodeId = 1;
      const positions = network.getPositions([nodeId]);
      const position = positions[nodeId];
      setDivPosition({
        left: position.x,
        top: position.y,
      });
    }
  }, [network]);

  return (
    <div>
      <Graph
        graph={graph}
        options={options}
        events={events}
        style={{ width: '100%', height: '500px' }}
        getNetwork={(network) => setNetwork(network)}
      />
      {divPosition.left && (
        <div
          style={{
            position: 'absolute',
            left: divPosition.left,
            top: divPosition.top,
            backgroundColor: 'yellow',
            width: '50px',
            height: '50px',
            borderRadius: '25px',
          }}
        />
      )}
    </div>
  );
}

export default App;


